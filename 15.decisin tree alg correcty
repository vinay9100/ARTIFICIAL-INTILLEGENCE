import numpy as np

class SimpleDecisionTree:
    def __init__(self, min_samples_split=2):
        self.min_samples_split = min_samples_split
        self.tree = None

    def fit(self, X, y):
        self.tree = self._build_tree(X, y)

    def _build_tree(self, X, y):
        if len(set(y)) == 1:
            return y[0]
        if len(y) < self.min_samples_split:
            return self._most_common_label(y)

        best_feature_index = self._best_split(X, y)
        tree = {best_feature_index: {}}

        for value in set(X[:, best_feature_index]):
            subset_X, subset_y = self._split(X, y, best_feature_index, value)
            tree[best_feature_index][value] = self._build_tree(subset_X, subset_y)

        return tree

    def _best_split(self, X, y):
        best_gini = float('inf')
        best_index = 0

        for index in range(X.shape[1]):
            gini = self._gini_index(X[:, index], y)
            if gini < best_gini:
                best_gini = gini
                best_index = index

        return best_index

    def _gini_index(self, feature, y):
        unique_classes = set(y)
        gini = 1
        for cls in unique_classes:
            prob_cls = np.sum(y == cls) / len(y)
            gini -= prob_cls ** 2
        return gini

    def _split(self, X, y, feature_index, value):
        mask = X[:, feature_index] == value
        return X[mask], y[mask]

    def _most_common_label(self, y):
        return np.bincount(y).argmax()

    def predict(self, X):
        return np.array([self._predict_sample(sample, self.tree) for sample in X])

    def _predict_sample(self, sample, tree):
        if not isinstance(tree, dict):
            return tree

        feature_index = list(tree.keys())[0]
        feature_value = sample[feature_index]

        if feature_value in tree[feature_index]:
            return self._predict_sample(sample, tree[feature_index][feature_value])
        else:
            return None

# Example usage
if __name__ == "__main__":
    # Sample dataset (Iris-like)
    X = np.array([[1, 2], [2, 3], [3, 1], [5, 2], [6, 3]])
    y = np.array([0, 0, 0, 1, 1])  # Binary labels

    # Create and train the decision tree
    tree = SimpleDecisionTree()
    tree.fit(X, y)

    # Make predictions
    predictions = tree.predict(X)
    print("Predictions:", predictions)
